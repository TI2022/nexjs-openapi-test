/* tslint:disable */
/* eslint-disable */
/**
 * API description
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthResponseDto,
  SignInUserDto,
  SignUpUserDto,
} from '../models/index';
import {
    AuthResponseDtoFromJSON,
    AuthResponseDtoToJSON,
    SignInUserDtoFromJSON,
    SignInUserDtoToJSON,
    SignUpUserDtoFromJSON,
    SignUpUserDtoToJSON,
} from '../models/index';

export interface AuthControllerSignInRequest {
    signInUserDto: SignInUserDto;
}

export interface AuthControllerSignUpRequest {
    signUpUserDto: SignUpUserDto;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     */
    async authControllerAuthenticationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/auth/authentication`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async authControllerAuthentication(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponseDto> {
        const response = await this.authControllerAuthenticationRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async authControllerSignInRaw(requestParameters: AuthControllerSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponseDto>> {
        if (requestParameters['signInUserDto'] == null) {
            throw new runtime.RequiredError(
                'signInUserDto',
                'Required parameter "signInUserDto" was null or undefined when calling authControllerSignIn().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/sign_in`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignInUserDtoToJSON(requestParameters['signInUserDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async authControllerSignIn(requestParameters: AuthControllerSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponseDto> {
        const response = await this.authControllerSignInRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async authControllerSignUpRaw(requestParameters: AuthControllerSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponseDto>> {
        if (requestParameters['signUpUserDto'] == null) {
            throw new runtime.RequiredError(
                'signUpUserDto',
                'Required parameter "signUpUserDto" was null or undefined when calling authControllerSignUp().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/sign_up`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignUpUserDtoToJSON(requestParameters['signUpUserDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async authControllerSignUp(requestParameters: AuthControllerSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponseDto> {
        const response = await this.authControllerSignUpRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
