/* tslint:disable */
/* eslint-disable */
/**
 * API description
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTodoDto,
  FindTodoListResponseDto,
  FindTodoResponseDto,
  UpdateTodoDto,
} from '../models/index';
import {
    CreateTodoDtoFromJSON,
    CreateTodoDtoToJSON,
    FindTodoListResponseDtoFromJSON,
    FindTodoListResponseDtoToJSON,
    FindTodoResponseDtoFromJSON,
    FindTodoResponseDtoToJSON,
    UpdateTodoDtoFromJSON,
    UpdateTodoDtoToJSON,
} from '../models/index';

export interface TodoControllerCreateRequest {
    createTodoDto: CreateTodoDto;
}

export interface TodoControllerFindOneRequest {
    id: string;
}

export interface TodoControllerRemoveRequest {
    id: string;
}

export interface TodoControllerUpdateRequest {
    id: string;
    updateTodoDto: UpdateTodoDto;
}

/**
 * 
 */
export class TodoApi extends runtime.BaseAPI {

    /**
     */
    async todoControllerCreateRaw(requestParameters: TodoControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindTodoResponseDto>> {
        if (requestParameters['createTodoDto'] == null) {
            throw new runtime.RequiredError(
                'createTodoDto',
                'Required parameter "createTodoDto" was null or undefined when calling todoControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/todo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTodoDtoToJSON(requestParameters['createTodoDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FindTodoResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async todoControllerCreate(requestParameters: TodoControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindTodoResponseDto> {
        const response = await this.todoControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async todoControllerFindAllRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindTodoListResponseDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/todo`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FindTodoListResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async todoControllerFindAll(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindTodoListResponseDto> {
        const response = await this.todoControllerFindAllRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async todoControllerFindOneRaw(requestParameters: TodoControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindTodoResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling todoControllerFindOne().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/todo/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FindTodoResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async todoControllerFindOne(requestParameters: TodoControllerFindOneRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindTodoResponseDto> {
        const response = await this.todoControllerFindOneRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async todoControllerRemoveRaw(requestParameters: TodoControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindTodoResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling todoControllerRemove().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/todo/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FindTodoResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async todoControllerRemove(requestParameters: TodoControllerRemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindTodoResponseDto> {
        const response = await this.todoControllerRemoveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async todoControllerUpdateRaw(requestParameters: TodoControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FindTodoResponseDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling todoControllerUpdate().'
            );
        }

        if (requestParameters['updateTodoDto'] == null) {
            throw new runtime.RequiredError(
                'updateTodoDto',
                'Required parameter "updateTodoDto" was null or undefined when calling todoControllerUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/todo/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTodoDtoToJSON(requestParameters['updateTodoDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FindTodoResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async todoControllerUpdate(requestParameters: TodoControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FindTodoResponseDto> {
        const response = await this.todoControllerUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
