/* tslint:disable */
/* eslint-disable */
/**
 * API description
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthResponseDto
 */
export interface AuthResponseDto {
    /**
     * 
     * @type {AuthResponseDtoUser}
     * @memberof AuthResponseDto
     */
    'user': AuthResponseDtoUser;
    /**
     * 
     * @type {string}
     * @memberof AuthResponseDto
     */
    'accessToken': string;
}
/**
 * 
 * @export
 * @interface AuthResponseDtoUser
 */
export interface AuthResponseDtoUser {
    /**
     * 
     * @type {number}
     * @memberof AuthResponseDtoUser
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof AuthResponseDtoUser
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof AuthResponseDtoUser
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof AuthResponseDtoUser
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof AuthResponseDtoUser
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface CreateTodoDto
 */
export interface CreateTodoDto {
    /**
     * 
     * @type {string}
     * @memberof CreateTodoDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CreateTodoDto
     */
    'content': string;
}
/**
 * 
 * @export
 * @interface FindTodoListResponseDto
 */
export interface FindTodoListResponseDto {
    /**
     * 
     * @type {Array<TodoEntity>}
     * @memberof FindTodoListResponseDto
     */
    'todos': Array<TodoEntity>;
}
/**
 * 
 * @export
 * @interface FindTodoResponseDto
 */
export interface FindTodoResponseDto {
    /**
     * 
     * @type {FindTodoResponseDtoTodo}
     * @memberof FindTodoResponseDto
     */
    'todo': FindTodoResponseDtoTodo;
}
/**
 * 
 * @export
 * @interface FindTodoResponseDtoTodo
 */
export interface FindTodoResponseDtoTodo {
    /**
     * 
     * @type {number}
     * @memberof FindTodoResponseDtoTodo
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof FindTodoResponseDtoTodo
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof FindTodoResponseDtoTodo
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof FindTodoResponseDtoTodo
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof FindTodoResponseDtoTodo
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof FindTodoResponseDtoTodo
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface SignInUserDto
 */
export interface SignInUserDto {
    /**
     * 
     * @type {string}
     * @memberof SignInUserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof SignInUserDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface SignUpUserDto
 */
export interface SignUpUserDto {
    /**
     * 
     * @type {string}
     * @memberof SignUpUserDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof SignUpUserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof SignUpUserDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface TodoEntity
 */
export interface TodoEntity {
    /**
     * 
     * @type {number}
     * @memberof TodoEntity
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof TodoEntity
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof TodoEntity
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof TodoEntity
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof TodoEntity
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof TodoEntity
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface UpdateTodoDto
 */
export interface UpdateTodoDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateTodoDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateTodoDto
     */
    'content': string;
}
/**
 * 
 * @export
 * @interface UserEntity
 */
export interface UserEntity {
    /**
     * 
     * @type {number}
     * @memberof UserEntity
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof UserEntity
     */
    'updatedAt': string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAuthentication: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/authentication`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SignInUserDto} signInUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignIn: async (signInUserDto: SignInUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signInUserDto' is not null or undefined
            assertParamExists('authControllerSignIn', 'signInUserDto', signInUserDto)
            const localVarPath = `/api/auth/sign_in`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signInUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SignUpUserDto} signUpUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignUp: async (signUpUserDto: SignUpUserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signUpUserDto' is not null or undefined
            assertParamExists('authControllerSignUp', 'signUpUserDto', signUpUserDto)
            const localVarPath = `/api/auth/sign_up`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signUpUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerAuthentication(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerAuthentication(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SignInUserDto} signInUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerSignIn(signInUserDto: SignInUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerSignIn(signInUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SignUpUserDto} signUpUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerSignUp(signUpUserDto: SignUpUserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerSignUp(signUpUserDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerAuthentication(options?: any): AxiosPromise<AuthResponseDto> {
            return localVarFp.authControllerAuthentication(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SignInUserDto} signInUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignIn(signInUserDto: SignInUserDto, options?: any): AxiosPromise<AuthResponseDto> {
            return localVarFp.authControllerSignIn(signInUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SignUpUserDto} signUpUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerSignUp(signUpUserDto: SignUpUserDto, options?: any): AxiosPromise<AuthResponseDto> {
            return localVarFp.authControllerSignUp(signUpUserDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerAuthentication(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerAuthentication(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SignInUserDto} signInUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerSignIn(signInUserDto: SignInUserDto, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerSignIn(signInUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SignUpUserDto} signUpUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerSignUp(signUpUserDto: SignUpUserDto, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerSignUp(signUpUserDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TodoApi - axios parameter creator
 * @export
 */
export const TodoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateTodoDto} createTodoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoControllerCreate: async (createTodoDto: CreateTodoDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTodoDto' is not null or undefined
            assertParamExists('todoControllerCreate', 'createTodoDto', createTodoDto)
            const localVarPath = `/api/todo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTodoDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoControllerFindAll: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/todo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoControllerFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('todoControllerFindOne', 'id', id)
            const localVarPath = `/api/todo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoControllerRemove: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('todoControllerRemove', 'id', id)
            const localVarPath = `/api/todo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateTodoDto} updateTodoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoControllerUpdate: async (id: string, updateTodoDto: UpdateTodoDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('todoControllerUpdate', 'id', id)
            // verify required parameter 'updateTodoDto' is not null or undefined
            assertParamExists('todoControllerUpdate', 'updateTodoDto', updateTodoDto)
            const localVarPath = `/api/todo/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTodoDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TodoApi - functional programming interface
 * @export
 */
export const TodoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TodoApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateTodoDto} createTodoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todoControllerCreate(createTodoDto: CreateTodoDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindTodoResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todoControllerCreate(createTodoDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todoControllerFindAll(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindTodoListResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todoControllerFindAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todoControllerFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindTodoResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todoControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todoControllerRemove(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindTodoResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todoControllerRemove(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateTodoDto} updateTodoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todoControllerUpdate(id: string, updateTodoDto: UpdateTodoDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FindTodoResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.todoControllerUpdate(id, updateTodoDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TodoApi - factory interface
 * @export
 */
export const TodoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TodoApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateTodoDto} createTodoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoControllerCreate(createTodoDto: CreateTodoDto, options?: any): AxiosPromise<FindTodoResponseDto> {
            return localVarFp.todoControllerCreate(createTodoDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoControllerFindAll(options?: any): AxiosPromise<FindTodoListResponseDto> {
            return localVarFp.todoControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoControllerFindOne(id: string, options?: any): AxiosPromise<FindTodoResponseDto> {
            return localVarFp.todoControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoControllerRemove(id: string, options?: any): AxiosPromise<FindTodoResponseDto> {
            return localVarFp.todoControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateTodoDto} updateTodoDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todoControllerUpdate(id: string, updateTodoDto: UpdateTodoDto, options?: any): AxiosPromise<FindTodoResponseDto> {
            return localVarFp.todoControllerUpdate(id, updateTodoDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TodoApi - object-oriented interface
 * @export
 * @class TodoApi
 * @extends {BaseAPI}
 */
export class TodoApi extends BaseAPI {
    /**
     * 
     * @param {CreateTodoDto} createTodoDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public todoControllerCreate(createTodoDto: CreateTodoDto, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).todoControllerCreate(createTodoDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public todoControllerFindAll(options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).todoControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public todoControllerFindOne(id: string, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).todoControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public todoControllerRemove(id: string, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).todoControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateTodoDto} updateTodoDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TodoApi
     */
    public todoControllerUpdate(id: string, updateTodoDto: UpdateTodoDto, options?: AxiosRequestConfig) {
        return TodoApiFp(this.configuration).todoControllerUpdate(id, updateTodoDto, options).then((request) => request(this.axios, this.basePath));
    }
}


